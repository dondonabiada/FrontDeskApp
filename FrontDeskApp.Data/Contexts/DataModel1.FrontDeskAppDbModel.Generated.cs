//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 20/09/2022 10:58:28 pm
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using FrontDeskApp.Entities;

namespace FrontDeskApp.Context
{

    /// <summary>
    /// There are no comments for FrontDeskAppDbModel class in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    public partial class FrontDeskAppDbModel : DbContext
    {

        /// <summary>
        /// There are no comments for FrontDeskAppDbModel constructor in the schema.
        /// </summary>
        public FrontDeskAppDbModel() :
            base()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for FrontDeskAppDbModel constructor in the schema.
        /// </summary>
        public FrontDeskAppDbModel(DbContextOptions<FrontDeskAppDbModel> options) :
            base(options)
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for OnConfiguring(DbContextOptionsBuilder optionsBuilder) method in the schema.
        /// </summary>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("FrontDeskAppDbModelConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        /// <summary>
        /// There are no comments for GetConnectionString method in the schema.
        /// </summary>
        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        /// <summary>
        /// Allows you to customize the configuration of model.
        /// </summary>
        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        /// <summary>
        /// There are no comments for AreaBoxes property in the schema.
        /// </summary>
        public virtual DbSet<AreaBox> AreaBoxes
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Customers property in the schema.
        /// </summary>
        public virtual DbSet<Customer> Customers
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Transactions property in the schema.
        /// </summary>
        public virtual DbSet<Transaction> Transactions
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for OnModelCreating in the schema.
        /// </summary>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AreaBoxMapping(modelBuilder);
            this.CustomizeAreaBoxMapping(modelBuilder);

            this.CustomerMapping(modelBuilder);
            this.CustomizeCustomerMapping(modelBuilder);

            this.TransactionMapping(modelBuilder);
            this.CustomizeTransactionMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region AreaBox Mapping

        /// <summary>
        /// There are no comments for AreaBoxMapping in the schema.
        /// </summary>
        private void AreaBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AreaBox>().ToTable(@"AreaBoxes", @"dbo");
            modelBuilder.Entity<AreaBox>().Property(x => x.AreaBoxId).HasColumnName(@"AreaBoxId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<AreaBox>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<AreaBox>().Property(x => x.AreaType).HasColumnName(@"AreaType").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<AreaBox>().Property(x => x.Status).HasColumnName(@"Status").HasColumnType(@"nchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<AreaBox>().HasKey(@"AreaBoxId");
        }

        /// <summary>
        /// There are no comments for CustomizeAreaBoxMapping in the schema.
        /// </summary>
        partial void CustomizeAreaBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region Customer Mapping

        /// <summary>
        /// There are no comments for CustomerMapping in the schema.
        /// </summary>
        private void CustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>().ToTable(@"Customers", @"dbo");
            modelBuilder.Entity<Customer>().Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Customer>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Customer>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Customer>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Customer>().HasKey(@"CustomerId");
        }

        /// <summary>
        /// There are no comments for CustomizeCustomerMapping in the schema.
        /// </summary>
        partial void CustomizeCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region Transaction Mapping

        /// <summary>
        /// There are no comments for TransactionMapping in the schema.
        /// </summary>
        private void TransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Transaction>().ToTable(@"Transactions", @"dbo");
            modelBuilder.Entity<Transaction>().Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Transaction>().Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Transaction>().Property(x => x.AreaBoxId).HasColumnName(@"AreaBoxId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Transaction>().Property(x => x.DateStored).HasColumnName(@"DateStored").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.DateRetrieved).HasColumnName(@"DateRetrieved").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Transaction>().Property(x => x.Status).HasColumnName(@"Status").HasColumnType(@"nchar(10)").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<Transaction>().HasKey(@"TransactionId");
        }

        /// <summary>
        /// There are no comments for CustomizeTransactionMapping in the schema.
        /// </summary>
        partial void CustomizeTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        /// <summary>
        /// There are no comments for RelationshipsMapping in the schema.
        /// </summary>
        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AreaBox>().HasMany(x => x.Transactions).WithOne(op => op.AreaBox).HasForeignKey(@"AreaBoxId").IsRequired(true);

            modelBuilder.Entity<Customer>().HasMany(x => x.Transactions).WithOne(op => op.Customer).HasForeignKey(@"CustomerId").IsRequired(true);

            modelBuilder.Entity<Transaction>().HasOne(x => x.Customer).WithMany(op => op.Transactions).HasForeignKey(@"CustomerId").IsRequired(true);
            modelBuilder.Entity<Transaction>().HasOne(x => x.AreaBox).WithMany(op => op.Transactions).HasForeignKey(@"AreaBoxId").IsRequired(true);
        }


        /// <summary>
        /// There are no comments for CustomizeMapping in the schema.
        /// </summary>
        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        /// <summary>
        /// There are no comments for HasChanges property in the schema.
        /// </summary>
        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }


        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();
    }
}
